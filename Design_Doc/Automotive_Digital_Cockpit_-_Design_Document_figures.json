{
  "title": "Automotive Digital Cockpit - Design Document",
  "author": "Abhishek Chauhan",
  "figures": [
    "@startuml title Socket.IO_ emit() with reserved event check, sockets.emit(_message_), and serverSideEmit() actor Developer as Dev participant _Socket_n(Client or Server)_ as Sock participant _Server A_ as SA participant _.png",
    "Cluster Communication Flow (Copy).png",
    "Cluster Communication Flow.png",
    "Frontend WS ping_pong + Backend Socket.IO serverSideEmit(_ping_) with ACKs(1).png",
    "Frontend WS ping_pong + Backend Socket.IO serverSideEmit(_ping_) with ACKs(2).png",
    "Frontend WS ping_pong + Backend Socket.IO serverSideEmit(_ping_) with ACKs.png",
    "Frontend WebSocket ping_pong + Backend Socket.IO serverSideEmit(_ping_).png",
    "Socket.IO Event Flow_ emit(), sockets.emit(_message_), and serverSideEmit().png",
    "Socket.IO Event Flow_ emit(), write(_message_), and serverSideEmit().drawio.png",
    "Socket.IO Flow_ emit() with _registerAckCallback, write(), and serverSideEmit().png",
    "Socket.IO Flow_ emit(), sockets.emit(_message_), serverSideEmit().png",
    "Socket.IO Flow_ emit(), write(_message_), and serverSideEmit().png",
    "Socket.IO Sequence_ emit(), sockets.emit(_message_), serverSideEmit().png",
    "Socket.IO client emit, server broadcast, and server-side emit.png",
    "Socket.IO event flow with RESERVED_EVENTS check, write(_message_), and serverSideEmit.drawio.png",
    "Socket.IO flow_ client emit(), server sockets.emit(_message_), and io.serverSideEmit(...).drawio.png",
    "Socket.IO flow_ emit() override (safe), write(_message_) broadcast, serverSideEmit() with ACKs.png",
    "Socket.IO flow_ emit() override, write(_message_), serverSideEmit().png",
    "Socket.IO flow_ emit(), write(_message_), and serverSideEmit().png",
    "Socket.IO flow_ emit_Ev_(), _registerAckCallback, write(_message_), serverSideEmit(.png",
    "Socket.IO flow_ safe emit(), namespace write(_message_), serverSideEmit() with ACKs(1).png",
    "Socket.IO flow_ safe emit(), namespace write(_message_), serverSideEmit() with ACKs.png",
    "Socket.IO flow_ send(), emit(), write(_message_), and serverSideEmit().png",
    "Socket.IO flow_ socket.send_emit(), io.write(_message_), and io.serverSideEmit(...).png",
    "Socket.IO lifecycle_ emit(), namespace broadcast, serverSideEmit().png",
    "Socket.IO send()_emit(), write(_message_), and serverSideEmit().png",
    "Socket.IO sequence_ emit(), write(_message_), serverSideEmit().png",
    "Socket.IO sequence_ send(), emit(), write(_message_), and serverSideEmit().png",
    "Socket.IO_ client emit(), server write(_message_), and io.serverSideEmit().png",
    "Socket.IO_ emit() + _registerAckCallback + write(_message_) + serverSideEmit().png",
    "Socket.IO_ emit() override + namespace _message_ broadcast + serverSideEmit() with ACKs.png",
    "Socket.IO_ emit() override + namespace _message_ broadcast + serverSideEmit().png",
    "Socket.IO_ emit() override + namespace write(_message_) + serverSideEmit() with ACKs.png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit() with ACKs(1).png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit() with ACKs(2).png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit() with ACKs(3).png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit() with ACKs(4) (Copy).png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit() with ACKs(4).png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit() with ACKs..png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit() with ACKs.png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit()(1).png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit()(2).png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit()(3).png",
    "Socket.IO_ emit() override + write(_message_) + serverSideEmit().png",
    "Socket.IO_ emit() override, namespace write(_message_), cluster serverSideEmit().png",
    "Socket.IO_ emit() override, namespace write(_message_), serverSideEmit().png",
    "Socket.IO_ emit() override, write(_message_), serverSideEmit() with ACKs.png",
    "Socket.IO_ emit() override, write(_message_), serverSideEmit().png",
    "Socket.IO_ emit() with _registerAckCallback, write(_message_), serverSideEmit().png",
    "Socket.IO_ emit(), write(_message_), serverSideEmit().png",
    "Socket.IO_ send(), emit() override, write(_message_), serverSideEmit().png",
    "Socket.IO_ send(), emit(), write(_message_), and serverSideEmit().png",
    "Socket.IO_ send(), emit(), write(_message_), serverSideEmit().png",
    "Socket.IO_ send()_write() via s.unshift + emit(), and serverSideEmit().png",
    "Untitled DiSocket.IO_ send(), emit() override, write(_message_), serverSideEmit()agram.png",
    "WebSocket ping_pong (frontend) vs Socket.IO serverSideEmit(_ping_) (backend).png",
    "socket.IO Flow_ emit() with _registerAckCallback, sockets.emit(_message_), and serverSideEmit().png",
    "socket.IO Flow_ emit() with reserved event check, write(_message_), and serverSideEmit().png"
  ]
}